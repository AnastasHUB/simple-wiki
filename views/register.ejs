<% title = "Inscription"; %>
<h1>Créer un compte</h1>

<% const captchaConfig = typeof captcha !== 'undefined' ? captcha : null; %>
<% if (typeof registrationDisabled !== 'undefined' && registrationDisabled && !captchaConfig) { %>
  <div class="card warning">
    Les inscriptions sont momentanément indisponibles car aucun captcha n'est configuré.
  </div>
  <p>
    Merci de réessayer plus tard ou de contacter un administrateur si le problème persiste.
  </p>
<% } else { %>
  <% const formErrors = typeof errors !== 'undefined' && Array.isArray(errors) ? errors : []; %>
  <% const formValues = typeof values !== 'undefined' && values && typeof values === 'object' ? values : {}; %>
  <% if (formErrors.length) { %>
    <div class="card error">
      <h2>Impossible de créer le compte</h2>
      <ul>
        <% formErrors.forEach(function(message) { %>
          <li><%= message %></li>
        <% }); %>
      </ul>
    </div>
  <% } %>
  <form method="post" action="/register" class="stacked-form" id="registerForm">
    <label for="register-username">Nom d'utilisateur</label>
    <input
      id="register-username"
      type="text"
      name="username"
      required
      minlength="3"
      maxlength="32"
      pattern="[A-Za-z0-9_.-]+"
      autocomplete="username"
      value="<%= formValues.username ? formValues.username : '' %>"
    />
    <p class="form-help">Autorisé&nbsp;: lettres, chiffres, points, tirets et underscores.</p>

    <label for="register-password">Mot de passe</label>
    <input
      id="register-password"
      type="password"
      name="password"
      required
      minlength="8"
      autocomplete="new-password"
    />
    <p class="form-help">Utilisez un mot de passe robuste d'au moins 8 caractères.</p>

    <fieldset class="captcha-selector">
      <legend>Vérification anti-robot</legend>
      <p>Complétez le reCAPTCHA pour continuer.</p>
      <div
        id="captcha-container"
        class="captcha-container"
        aria-live="polite"
        data-sitekey="<%= captchaConfig.siteKey %>"
        data-script="<%= captchaConfig.scriptUrl %>"
        data-global="<%= captchaConfig.global %>"
      ></div>
    </fieldset>

    <input type="hidden" name="captchaToken" id="captcha-token" required />

    <div class="actions">
      <button class="btn success" type="submit" data-icon="✨">Créer mon compte</button>
    </div>
  </form>
  <p class="form-help">
    Vous avez déjà un compte&nbsp;?<a href="/login">Connectez-vous ici</a>.
  </p>

  <script>
    (function () {
      const container = document.getElementById("captcha-container");
      const tokenInput = document.getElementById("captcha-token");
      if (!container || !tokenInput) {
        return;
      }
      const siteKey = container.dataset.sitekey;
      const scriptUrl = container.dataset.script;
      const globalName = container.dataset.global;
      if (!siteKey || !scriptUrl || !globalName) {
        return;
      }

      let scriptPromise = null;

      function ensureScript(scriptUrl, globalName) {
        if (window[globalName]) {
          return Promise.resolve(window[globalName]);
        }
        if (scriptPromise) {
          return scriptPromise;
        }
        scriptPromise = new Promise((resolve, reject) => {
          const script = document.createElement("script");
          script.src = scriptUrl;
          script.async = true;
          script.defer = true;
          script.onload = () => {
            const checkReady = () => {
              if (window[globalName]) {
                resolve(window[globalName]);
              } else {
                window.setTimeout(checkReady, 30);
              }
            };
            checkReady();
          };
          script.onerror = () => reject(new Error("Impossible de charger le script du captcha."));
          document.head.appendChild(script);
        });
        return scriptPromise;
      }

      function resetContainer() {
        tokenInput.value = "";
        container.innerHTML = "";
      }

      function renderCaptcha(library) {
        resetContainer();
        const placeholder = document.createElement("div");
        placeholder.className = "captcha-frame";
        container.appendChild(placeholder);

        function handleToken(token) {
          tokenInput.value = token || "";
        }
        function handleError() {
          tokenInput.value = "";
        }

        if (!library || typeof library.render !== "function") {
          throw new Error("Captcha non supporté.");
        }

        library.render(placeholder, {
          sitekey: siteKey,
          callback: handleToken,
          "expired-callback": handleError,
          "error-callback": handleError,
        });
      }

      ensureScript(scriptUrl, globalName)
        .then((library) => {
          renderCaptcha(library);
        })
        .catch((error) => {
          console.error(error);
          container.innerHTML =
            '<p class="form-help error">Impossible de charger le captcha. Veuillez rafraîchir la page.</p>';
        });
    })();
  </script>
<% } %>
