<% title='R√¥les'; %>
<h1>Gestion des r√¥les</h1>
<p class="text-muted">Cr√©ez de nouveaux r√¥les et ajustez leurs permissions. Les utilisateurs associ√©s h√©ritent automatiquement des permissions de leur r√¥le.</p>

<%
  const permissionOptions = [
    {
      field: 'is_admin',
      label: 'Administrateur',
      description: "Donne un acc√®s complet √† l'administration, toutes les permissions sont implicites.",
    },
    {
      field: 'is_moderator',
      label: 'Mod√©rateur',
      description: "Autorise la mod√©ration g√©n√©rale des contenus (commentaires, pages, contributions).",
    },
    {
      field: 'can_comment',
      label: 'Commenter',
      description: "Permet de publier des commentaires sur les articles publics.",
    },
    {
      field: 'can_submit_pages',
      label: 'Soumettre des contenus',
      description: "Permet d'envoyer des brouillons de pages pour relecture.",
    },
    {
      field: 'is_contributor',
      label: 'Publier des articles',
      description: "Autorise la publication imm√©diate de nouvelles pages sans validation.",
    },
    {
      field: 'is_helper',
      label: 'Commentaires sans mod√©ration',
      description: "Les commentaires publi√©s sont visibles imm√©diatement sans approbation pr√©alable.",
    },
    {
      field: 'can_moderate_comments',
      label: 'Mod√©rer les commentaires',
      description: "Permet de supprimer, masquer ou approuver des commentaires d'autres utilisateurs.",
    },
    {
      field: 'can_review_submissions',
      label: 'Revoir les contributions',
      description: "Donne acc√®s √† la file de contributions afin d'accepter ou refuser les propositions.",
    },
    {
      field: 'can_manage_pages',
      label: 'G√©rer les articles',
      description: "Autorise l'√©dition, la publication et la suppression des pages existantes.",
    },
    {
      field: 'can_view_stats',
      label: 'Voir les statistiques',
      description: "Affiche les statistiques d'audience et les indicateurs d'activit√© du wiki.",
    },
    {
      field: 'can_manage_users',
      label: 'G√©rer les utilisateurs',
      description: "Permet de modifier les comptes, leurs r√¥les et leur √©tat d'activation.",
    },
    {
      field: 'can_manage_roles',
      label: 'G√©rer les r√¥les',
      description: "Donne acc√®s √† cette interface d'administration des r√¥les.",
    },
    {
      field: 'can_manage_likes',
      label: 'G√©rer les likes',
      description: "Autorise la suppression ou le r√©tablissement des mentions J'aime.",
    },
    {
      field: 'can_manage_trash',
      label: 'G√©rer la corbeille',
      description: "Permet de restaurer ou purger les contenus supprim√©s.",
    },
    {
      field: 'can_manage_uploads',
      label: 'G√©rer les images',
      description: "Autorise l'ajout, la suppression et le renommage des fichiers envoy√©s.",
    },
    {
      field: 'can_manage_settings',
      label: 'Modifier les param√®tres',
      description: "Donne acc√®s √† la configuration g√©n√©rale du site (nom, logo, int√©grations...).",
    },
    {
      field: 'can_manage_ip_bans',
      label: 'G√©rer les blocages IP',
      description: "Permet de consulter, ajouter ou lever des blocages IP manuellement.",
    },
    {
      field: 'can_manage_ip_reputation',
      label: 'G√©rer la r√©putation IP',
      description: "Acc√®s aux outils de r√©putation automatique pour marquer des IP s√ªres ou suspectes.",
    },
    {
      field: 'can_manage_ip_profiles',
      label: 'G√©rer les profils IP',
      description: "Autorise la consultation d√©taill√©e des profils IP et leurs historiques.",
    },
    {
      field: 'can_review_ban_appeals',
      label: 'Examiner les demandes de d√©ban',
      description: "Permet de traiter les demandes de r√©examen des bannissements utilisateurs.",
    },
    {
      field: 'can_view_events',
      label: 'Voir les √©v√©nements',
      description: "Affiche le journal des √©v√©nements internes pour suivre l'activit√© administrative.",
    },
    {
      field: 'can_view_snowflakes',
      label: 'Voir les identifiants Snowflake',
      description: "Montre les identifiants Snowflake complets lors de l'inspection des contenus.",
    },
  ];
%>

<section class="role-manager">
  <% if (!roles || !roles.length) { %>
    <p class="card">Aucun r√¥le d√©fini pour le moment.</p>
  <% } else { %>
    <aside class="role-sidebar card" aria-label="R√¥les disponibles">
      <div class="role-sidebar-header">
        <div class="role-sidebar-header-text">
          <h2 class="h3">R√¥les existants</h2>
          <p class="text-sm text-muted">S√©lectionnez un r√¥le pour afficher et modifier ses permissions.</p>
        </div>
        <div class="role-sidebar-actions">
          <button
            type="button"
            class="btn secondary"
            data-icon="‚ûï"
            data-action="create-role"
          >
            Nouveau r√¥le
          </button>
        </div>
      </div>
      <ul class="role-selector" role="list">
        <% roles.forEach((role, index) => { %>
          <li
            class="role-selector-item"
            draggable="true"
            data-role-id="<%= role.id %>"
            id="role-<%= role.id %>"
          >
            <button
              type="button"
              class="role-choice <%= index === 0 ? 'is-active' : '' %>"
              data-role-id="<%= role.id %>"
              aria-pressed="<%= index === 0 ? 'true' : 'false' %>"
            >
              <span class="role-choice-name"><%= role.name %></span>
              <span class="badge"><%= role.userCount || 0 %> utilisateur<%= (role.userCount || 0) > 1 ? 's' : '' %></span>
            </button>
          </li>
        <% }) %>
      </ul>
    </aside>
    <div class="role-detail">
      <% roles.forEach((role, index) => { %>
        <article class="card role-detail-panel" data-role-id="<%= role.id %>" <%= index === 0 ? '' : 'hidden' %>>
          <div class="role-editor">
            <div class="role-summary">
              <div class="role-summary-header">
                <h2 class="h3"><%= role.name %></h2>
                <span class="badge"><%= role.userCount || 0 %> utilisateur<%= (role.userCount || 0) > 1 ? 's' : '' %></span>
              </div>
              <% if (role.description) { %>
                <p class="text-muted"><%= role.description %></p>
              <% } %>
              <% if (role.is_system) { %>
                <p class="text-xs text-muted">R√¥le syst√®me prot√©g√©</p>
              <% } %>
              <% if (!role.is_system && (role.name || '').toLowerCase() !== 'everyone') { %>
                <div class="role-summary-footer">
                  <% if ((role.userCount || 0) === 0) { %>
                    <form method="post" action="/admin/roles/<%= role.id %>" aria-label="Supprimer le r√¥le <%= role.name %>">
                      <input type="hidden" name="_action" value="delete" />
                      <button class="btn danger" type="submit" data-icon="üóëÔ∏è" onclick="return confirm('Supprimer d√©finitivement ce r√¥le ?');">Supprimer le r√¥le</button>
                    </form>
                  <% } else { %>
                    <p class="text-sm text-muted">
                      Ce r√¥le est actuellement attribu√© √† <strong><%= role.userCount %></strong>
                      utilisateur<%= role.userCount > 1 ? 's' : '' %>. R√©assignez-les vers Everyone pour pouvoir supprimer ce r√¥le.
                    </p>
                    <form method="post" action="/admin/roles/<%= role.id %>" class="role-reassign-form" aria-label="R√©assigner les utilisateurs de <%= role.name %> vers Everyone">
                      <input type="hidden" name="_action" value="reassign_to_everyone" />
                      <button class="btn secondary" type="submit" data-icon="üîÅ">R√©assigner tous les utilisateurs vers Everyone</button>
                    </form>
                  <% } %>
                </div>
              <% } %>
            </div>
            <form method="post" action="/admin/roles/<%= role.id %>" class="role-permissions-column" aria-label="Mettre √† jour les permissions pour <%= role.name %>">
              <fieldset class="role-permissions">
                <legend>Permissions</legend>
                <div class="role-permissions-grid">
                  <% permissionOptions.forEach((option) => { %>
                    <label class="checkbox role-permission">
                      <input
                        type="checkbox"
                        name="<%= option.field %>"
                        value="1"
                        <%= role[option.field] ? 'checked' : '' %>
                      />
                      <span class="permission-title"><%= option.label %></span>
                      <span class="permission-description"><%= option.description %></span>
                    </label>
                  <% }) %>
                </div>
              </fieldset>
              <div class="role-actions">
                <button class="btn secondary" type="submit" data-icon="üíæ">Enregistrer</button>
              </div>
            </form>
          </div>
        </article>
      <% }) %>
    </div>
  <% } %>
</section>

<script>
  (function () {
    const manager = document.querySelector('.role-manager');
    if (!manager) {
      return;
    }

    const panels = Array.from(manager.querySelectorAll('.role-detail-panel'));
    const list = manager.querySelector('.role-selector');
    let buttons = Array.from(manager.querySelectorAll('.role-choice'));

    if (!buttons.length || !panels.length) {
      return;
    }

    const refreshButtons = () => {
      buttons = Array.from(manager.querySelectorAll('.role-choice'));
      return buttons;
    };

    const setActive = (roleId) => {
      refreshButtons().forEach((button) => {
        const isActive = button.dataset.roleId === roleId;
        button.classList.toggle('is-active', isActive);
        button.setAttribute('aria-pressed', isActive ? 'true' : 'false');
      });

      panels.forEach((panel) => {
        panel.hidden = panel.dataset.roleId !== roleId;
      });
    };

    const createRoleButton = manager.querySelector('[data-action="create-role"]');
    const createRole = async ({ name, description }) => {
      const response = await fetch('/admin/roles', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json',
          'X-Requested-With': 'XMLHttpRequest',
        },
        credentials: 'same-origin',
        body: JSON.stringify({ name, description }),
      });
      let payload = null;
      try {
        payload = await response.json();
      } catch (_err) {
        payload = null;
      }
      if (!response.ok || !payload?.success) {
        const message = payload?.message || 'Impossible de cr√©er le r√¥le. Merci de r√©essayer.';
        throw new Error(message);
      }
      return payload;
    };

    const nextDefaultName = () => {
      const baseName = 'Nouveau r√¥le';
      const existingNames = new Set(
        refreshButtons().map((button) => button.querySelector('.role-choice-name')?.textContent?.trim() || ''),
      );
      if (!existingNames.has(baseName)) {
        return baseName;
      }
      let index = 2;
      while (existingNames.has(`${baseName} ${index}`)) {
        index += 1;
      }
      return `${baseName} ${index}`;
    };

    if (createRoleButton) {
      createRoleButton.addEventListener('click', async () => {
        const suggestedName = nextDefaultName();
        let name = window.prompt('Nom du nouveau r√¥le', suggestedName);
        if (!name) {
          return;
        }
        name = name.trim();
        if (!name) {
          return;
        }
        const description = window.prompt('Description du r√¥le (facultatif)', '') || '';
        createRoleButton.disabled = true;
        createRoleButton.dataset.icon = '‚Ä¶';
        try {
          const result = await createRole({ name, description: description.trim() });
          if (result?.success && result?.role?.id) {
            window.location.href = `/admin/roles#role-${result.role.id}`;
          } else {
            throw new Error(result?.message || 'Impossible de cr√©er le r√¥le.');
          }
        } catch (error) {
          console.error('Impossible de cr√©er le r√¥le', error);
          window.alert(error?.message || 'Impossible de cr√©er le r√¥le. Merci de r√©essayer.');
        } finally {
          createRoleButton.disabled = false;
          createRoleButton.dataset.icon = '‚ûï';
        }
      });
    }

    refreshButtons().forEach((button) => {
      button.addEventListener('click', () => {
        setActive(button.dataset.roleId);
      });
    });

    if (!list) {
      return;
    }

    const hash = window.location.hash || '';
    if (hash.startsWith('#role-')) {
      const roleId = hash.replace('#role-', '');
      if (roleId && list.querySelector(`[data-role-id="${roleId}"]`)) {
        setActive(roleId);
        const target = document.getElementById(`role-${roleId}`);
        if (target) {
          target.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }
    }

    const getOrder = () =>
      Array.from(list.querySelectorAll('.role-selector-item'))
        .map((item) => item.dataset.roleId)
        .filter(Boolean);

    let lastOrder = getOrder().join(',');
    let draggedItem = null;

    const getDragAfterElement = (container, y) => {
      const items = Array.from(
        container.querySelectorAll('.role-selector-item:not(.is-dragging)'),
      );
      return items.reduce(
        (closest, item) => {
          const box = item.getBoundingClientRect();
          const offset = y - box.top - box.height / 2;
          if (offset < 0 && offset > closest.offset) {
            return { offset, element: item };
          }
          return closest;
        },
        { offset: Number.NEGATIVE_INFINITY, element: null },
      ).element;
    };

    const persistOrder = (order) => {
      if (!order.length) {
        return;
      }
      fetch('/admin/roles/reorder', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json',
          'X-Requested-With': 'XMLHttpRequest',
        },
        credentials: 'same-origin',
        body: JSON.stringify({ order }),
      }).catch((error) => {
        console.error("Impossible de sauvegarder l'ordre des r√¥les", error);
      });
    };

    const finishDrag = () => {
      if (!draggedItem) {
        return;
      }
      draggedItem.classList.remove('is-dragging');
      const order = getOrder();
      const serialized = order.join(',');
      if (serialized !== lastOrder) {
        lastOrder = serialized;
        persistOrder(order);
      }
      draggedItem = null;
    };

    list.addEventListener('dragstart', (event) => {
      const item = event.target.closest('.role-selector-item');
      if (!item) {
        return;
      }
      draggedItem = item;
      item.classList.add('is-dragging');
      if (event.dataTransfer) {
        event.dataTransfer.effectAllowed = 'move';
        event.dataTransfer.setData('text/plain', item.dataset.roleId || '');
      }
    });

    list.addEventListener('dragover', (event) => {
      if (!draggedItem) {
        return;
      }
      event.preventDefault();
      const afterElement = getDragAfterElement(list, event.clientY);
      if (!afterElement) {
        list.appendChild(draggedItem);
        return;
      }
      if (afterElement !== draggedItem) {
        list.insertBefore(draggedItem, afterElement);
      }
    });

    list.addEventListener('drop', (event) => {
      event.preventDefault();
      finishDrag();
    });

    list.addEventListener('dragend', () => {
      finishDrag();
    });
  })();
</script>
