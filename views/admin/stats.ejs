<% title='Statistiques'; %>
<%
  const locale = 'fr-FR';
  const numberFormatter = new Intl.NumberFormat(locale);
  const decimalFormatter = new Intl.NumberFormat(locale, {
    minimumFractionDigits: 0,
    maximumFractionDigits: 1,
  });
  const formatNumber = (value) => {
    const numeric = Number(value);
    if (!Number.isFinite(numeric)) {
      return '0';
    }
    return numberFormatter.format(Math.round(numeric));
  };
  const formatBytes = (value) => {
    const numeric = Number(value);
    if (!Number.isFinite(numeric) || numeric <= 0) {
      return '0 o';
    }
    const units = ['o', 'Ko', 'Mo', 'Go', 'To', 'Po'];
    let unitIndex = 0;
    let size = numeric;
    while (size >= 1024 && unitIndex < units.length - 1) {
      size /= 1024;
      unitIndex += 1;
    }
    const formatted =
      size >= 10
        ? numberFormatter.format(Math.round(size))
        : decimalFormatter.format(size);
    return `${formatted} ${units[unitIndex]}`;
  };
  const formatPercentage = (value) => {
    const numeric = Number(value);
    if (!Number.isFinite(numeric) || numeric <= 0) {
      return '0';
    }
    return decimalFormatter.format(numeric);
  };
  const storage = storageStats || {
    databaseFileSize: 0,
    databaseAllocatedBytes: 0,
    databaseUsedBytes: 0,
    databaseFreeBytes: 0,
    breakdown: [],
    totalTrackedBytes: 0,
    percentageBaseBytes: 0,
    tableDetails: [],
    tableDetailsError: null,
  };
%>
<section class="card stats-hero">
  <div>
    <h1 class="mt-0">Tableau de bord des statistiques</h1>
    <p class="text-muted">Suivez en un clin d'œil la popularité du wiki et la charge de modération.</p>
  </div>
  <div class="stats-hero-metrics">
    <div>
      <span class="stats-hero-label">Vues cumulées</span>
      <strong><%= totalViews %></strong>
    </div>
    <div>
      <span class="stats-hero-label">Moyenne par page</span>
      <strong><%= avgViewsPerPage %></strong>
    </div>
    <div>
      <span class="stats-hero-label">Visiteurs uniques</span>
      <strong><%= totalsBreakdown.uniqueIps %></strong>
    </div>
  </div>
</section>

<section class="stats-overview-grid">
  <div class="card">
    <h2>Résumé global</h2>
    <ul class="stat-grid">
      <li>
        <span class="label">Vues cumulées</span>
        <strong><%= totalViews %></strong>
      </li>
      <li>
        <span class="label">Likes</span>
        <strong><%= totalsBreakdown.likes %></strong>
      </li>
      <li>
        <span class="label">Commentaires</span>
        <strong><%= totalsBreakdown.comments %></strong>
      </li>
      <li>
        <span class="label">Blocages actifs</span>
        <strong><%= totalsBreakdown.activeBans %></strong>
      </li>
      <li>
        <span class="label">Événements loggés</span>
        <strong><%= totalsBreakdown.events %></strong>
      </li>
      <li>
        <span class="label">Visiteurs uniques (IP)</span>
        <strong><%= totalsBreakdown.uniqueIps %></strong>
      </li>
    </ul>
    <% if (totalsBreakdown.commentByStatus && totalsBreakdown.commentByStatus.length) { %>
      <h3>Commentaires par statut</h3>
      <div class="table-wrap">
        <table class="data-table compact">
          <thead>
            <tr>
              <th>Statut</th>
              <th>Total</th>
            </tr>
          </thead>
          <tbody>
            <% totalsBreakdown.commentByStatus.forEach(row => { %>
              <tr>
                <td><%= row.status %></td>
                <td><%= row.count %></td>
              </tr>
            <% }) %>
          </tbody>
        </table>
      </div>
    <% } %>
    <p class="note-text">
      Les totaux combinent les événements récents et les agrégats quotidiens. Utilisez les sections ci-dessous pour analyser les périodes spécifiques.
    </p>
  </div>
  <div class="card stats-highlight-card">
    <h2>Indicateurs clés</h2>
    <% if (!engagementHighlights.length) { %>
      <p>Aucun indicateur disponible pour le moment.</p>
    <% } else { %>
      <ul class="stats-highlight-grid">
        <% engagementHighlights.forEach(item => { %>
          <li>
            <span class="highlight-icon" aria-hidden="true"><%= item.icon %></span>
            <div>
              <span class="highlight-label"><%= item.label %></span>
              <strong><%= item.value %></strong>
              <% if (item.secondary) { %>
                <span class="highlight-secondary"><%= item.secondary %></span>
              <% } %>
            </div>
          </li>
        <% }) %>
      </ul>
    <% } %>
  </div>
</section>

<section class="card stats-storage-card">
  <div class="stats-storage-header">
    <div>
      <h2 class="mt-0">Statistiques de stockage</h2>
      <p class="text-muted text-sm">
        Analyse de l'espace occupé dans la base de données SQLite et répartition des contenus lourds.
      </p>
    </div>
  </div>
  <div class="stats-storage-metrics">
    <div class="storage-metric">
      <span class="label">Taille du fichier</span>
      <strong><%= formatBytes(storage.databaseFileSize) %></strong>
      <small>Taille sur disque</small>
    </div>
    <div class="storage-metric">
      <span class="label">Pages utilisées</span>
      <strong><%= formatBytes(storage.databaseUsedBytes) %></strong>
      <small>Espace réellement occupé</small>
    </div>
    <div class="storage-metric">
      <span class="label">Espace libre</span>
      <strong><%= formatBytes(storage.databaseFreeBytes) %></strong>
      <small>Pages disponibles</small>
    </div>
    <div class="storage-metric">
      <span class="label">Stockage suivi</span>
      <strong><%= formatBytes(storage.totalTrackedBytes) %></strong>
      <small>Somme des postes détaillés</small>
    </div>
  </div>
  <% if (storage.breakdown && storage.breakdown.length) { %>
    <h3>Répartition par contenu</h3>
    <ul class="storage-breakdown-list">
      <% storage.breakdown.forEach((entry) => { %>
        <li>
          <div>
            <span class="label"><%= entry.label %></span>
            <% if (Number.isFinite(entry.rows)) { %>
              <span class="sub"><%= formatNumber(entry.rows) %> entrées</span>
            <% } else { %>
              <span class="sub text-muted">Nombre exact indisponible</span>
            <% } %>
          </div>
          <div class="storage-breakdown-size">
            <strong><%= formatBytes(entry.bytes) %></strong>
            <% if (entry.bytesSource === 'estimate') { %>
              <span class="storage-chip" title="Valeur estimée d'après le contenu">est.</span>
            <% } else if (entry.bytesSource === 'derived') { %>
              <span class="storage-chip" title="Différence entre l'espace utilisé et les postes suivis">reste</span>
            <% } %>
            <% if (entry.percentage > 0) { %>
              <span class="text-muted storage-percentage"><%= formatPercentage(entry.percentage) %>%</span>
            <% } %>
          </div>
        </li>
      <% }) %>
    </ul>
    <p class="note-text">
      Pourcentage calculé sur <strong><%= formatBytes(storage.percentageBaseBytes || storage.totalTrackedBytes) %></strong>
      d'espace utilisé dans la base.
    </p>
  <% } else { %>
    <p class="text-muted">Aucune donnée de stockage n'est disponible pour le moment.</p>
  <% } %>
  <% if (storage.tableDetailsError) { %>
    <p class="note-text text-danger">Impossible de récupérer le détail des tables : <%= storage.tableDetailsError %></p>
  <% } %>
  <% const storageTables = Array.isArray(storage.tableDetails) ? storage.tableDetails.slice(0, 12) : []; %>
  <% if (storageTables.length) { %>
    <h3>Tables les plus volumineuses</h3>
    <div class="table-wrap">
      <table class="data-table compact">
        <thead>
          <tr>
            <th>Table</th>
            <th>Taille totale</th>
            <th>Payload</th>
            <th>Libre</th>
            <th>Pages</th>
            <th>Lignes (estim.)</th>
          </tr>
        </thead>
        <tbody>
          <% storageTables.forEach((row) => { %>
            <tr>
              <td><code><%= row.name %></code></td>
              <td><%= formatBytes(row.sizeBytes) %></td>
              <td><%= formatBytes(row.payloadBytes) %></td>
              <td><%= formatBytes(row.unusedBytes) %></td>
              <td><%= formatNumber(row.pageCount) %></td>
              <td><%= row.rowEstimate ? formatNumber(row.rowEstimate) : '—' %></td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
    <p class="text-muted text-sm">Affichage limité aux 12 tables principales. Les tailles incluent les index associés.</p>
  <% } %>
</section>

<%
  const liveWindowMinutes = Math.max(
    1,
    Math.round((liveVisitorsWindowSeconds || 0) / 60),
  );
  const liveWindowLabel =
    (liveVisitorsWindowSeconds || 0) >= 60
      ? `${liveWindowMinutes} minute${liveWindowMinutes > 1 ? 's' : ''}`
      : `${liveVisitorsWindowSeconds || 0} seconde${
          (liveVisitorsWindowSeconds || 0) > 1 ? 's' : ''
        }`;
%>
<section
  class="card stats-live-card"
  data-live-stats-card
  data-endpoint="/admin/stats/live"
  data-live-page="<%= liveVisitorsPagination?.page || 1 %>"
  data-live-per-page="<%= liveVisitorsPagination?.perPage || 5 %>"
  data-live-total-pages="<%= liveVisitorsPagination?.totalPages || 1 %>"
  data-live-total-items="<%= liveVisitorsPagination?.totalItems || 0 %>"
  data-page-param="livePage"
  data-per-page-param="livePerPage"
  data-live-window-seconds="<%= liveVisitorsWindowSeconds %>"
>
  <div class="card-header live-stats-header">
    <div>
      <h2 class="mt-0">Live stats</h2>
      <p class="text-muted text-sm" data-live-window-label>
        Basé sur l'activité des <%= liveWindowLabel %> précédentes.
      </p>
      <p class="text-muted text-sm" data-live-status>Dernière mise à jour : --</p>
    </div>
    <div class="live-stats-refresh">
      <label for="liveStatsInterval">Rafraîchir toutes les</label>
      <select id="liveStatsInterval" data-live-refresh>
        <option value="1000">1 seconde</option>
        <option value="5000" selected>5 secondes</option>
        <option value="10000">10 secondes</option>
        <option value="30000">30 secondes</option>
        <option value="60000">1 minute</option>
        <option value="120000">2 minutes</option>
        <option value="300000">5 minutes</option>
      </select>
    </div>
  </div>
  <p
    class="live-stats-empty"
    data-live-empty
    <%= liveVisitors.length ? 'hidden' : '' %>
  >
    Aucun visiteur actif détecté pour le moment.
  </p>
  <div
    class="table-wrap"
    data-live-table
    <%= liveVisitors.length ? '' : 'hidden' %>
  >
    <table class="data-table compact">
      <thead>
        <tr>
          <th>Adresse IP</th>
          <th>Type</th>
          <th>Page actuelle</th>
          <th>Dernière activité</th>
        </tr>
      </thead>
      <tbody data-live-table-body>
        <% liveVisitors.forEach((visitor) => { %>
          <tr>
            <td><code><%= visitor.ip %></code></td>
            <td>
              <% if (visitor.isBot) { %>
                <span class="status-pill suspicious">Bot</span>
                <% if (visitor.botReason) { %>
                  <br /><small class="text-muted"><%= visitor.botReason %></small>
                <% } %>
              <% } else { %>
                <span class="status-pill clean">Visiteur</span>
              <% } %>
              <% if (visitor.userAgent) { %>
                <br /><small class="text-muted"><%= visitor.userAgent %></small>
              <% } %>
            </td>
            <td><a href="<%= visitor.path %>"><%= visitor.path %></a></td>
            <td>
              <time datetime="<%= visitor.lastSeenIso %>">
                il y a <%= visitor.lastSeenRelative %>
              </time>
            </td>
          </tr>
        <% }) %>
      </tbody>
    </table>
  </div>
  <div
    class="table-footer"
    data-live-footer
    <%= liveVisitors.length ? '' : 'hidden' %>
  >
    <div class="live-stats-per-page">
      <label for="liveStatsPerPage" class="nowrap">Éléments par page</label>
      <select id="liveStatsPerPage" data-live-per-page>
        <% (liveVisitorsPagination?.perPageOptions || []).forEach(option => { %>
          <option value="<%= option %>" <%= option === liveVisitorsPagination.perPage ? 'selected' : '' %>><%= option %></option>
        <% }) %>
      </select>
    </div>
    <span data-live-page-info>
      Page <%= liveVisitorsPagination?.page || 1 %> sur <%= liveVisitorsPagination?.totalPages || 1 %>
    </span>
    <div class="pager">
      <button
        type="button"
        class="btn"
        data-icon="⬅️"
        data-live-prev
        <%= liveVisitorsPagination?.hasPrevious ? '' : 'disabled' %>
      >
        Précédent
      </button>
      <button
        type="button"
        class="btn"
        data-icon="➡️"
        data-live-next
        <%= liveVisitorsPagination?.hasNext ? '' : 'disabled' %>
      >
        Suivant
      </button>
    </div>
  </div>
</section>

<%
  const trendsRangeLabel =
    viewTrendsRange?.from && viewTrendsRange?.to
      ? `${new Date(viewTrendsRange.from).toLocaleDateString('fr-FR')} – ${new Date(viewTrendsRange.to).toLocaleDateString('fr-FR')}`
      : "Période indisponible";
  const trendsTotalLabel = typeof viewTrendsTotal === 'number'
    ? viewTrendsTotal.toLocaleString('fr-FR')
    : '0';
  const trendsUpdatedLabel = viewTrendsGeneratedAt
    ? new Date(viewTrendsGeneratedAt).toLocaleString('fr-FR')
    : '—';
%>
<section
  class="card stats-trends-card"
  data-view-trends
  data-endpoint="/admin/stats/trends.json"
  data-initial-range="<%= viewTrendsRangeDays %>"
>
  <div class="stats-trends-header">
    <div>
      <h2 class="mt-0">Tendance des vues quotidiennes</h2>
      <p class="text-muted text-sm">
        Visualisez l'évolution des vues agrégées et comparez rapidement les périodes clés.
      </p>
    </div>
    <div class="stats-trends-actions" role="group" aria-label="Changer la période analysée">
      <button
        type="button"
        class="stats-trends-range-btn <%= viewTrendsRangeDays === 7 ? 'is-active' : '' %>"
        data-trend-range="7"
        aria-pressed="<%= viewTrendsRangeDays === 7 ? 'true' : 'false' %>"
      >
        7 jours
      </button>
      <button
        type="button"
        class="stats-trends-range-btn <%= viewTrendsRangeDays === 14 ? 'is-active' : '' %>"
        data-trend-range="14"
        aria-pressed="<%= viewTrendsRangeDays === 14 ? 'true' : 'false' %>"
      >
        14 jours
      </button>
      <button
        type="button"
        class="stats-trends-range-btn <%= viewTrendsRangeDays === 30 ? 'is-active' : '' %>"
        data-trend-range="30"
        aria-pressed="<%= viewTrendsRangeDays === 30 ? 'true' : 'false' %>"
      >
        30 jours
      </button>
    </div>
  </div>
  <div class="stats-trends-body">
    <p class="stats-trends-status text-sm" data-chart-status aria-live="polite">
      Chargement des tendances…
    </p>
    <div class="stats-trends-chart" data-chart-region aria-hidden="true"></div>
    <div class="stats-trends-meta">
      <dl>
        <div>
          <dt>Période affichée</dt>
          <dd data-chart-range-label><%= trendsRangeLabel %></dd>
        </div>
        <div>
          <dt>Total des vues</dt>
          <dd data-chart-total><%= trendsTotalLabel %></dd>
        </div>
        <div>
          <dt>Dernière mise à jour</dt>
          <dd data-chart-generated-at><%= trendsUpdatedLabel %></dd>
        </div>
      </dl>
    </div>
    <div class="stats-trends-fallback" data-chart-fallback>
      <% if (!viewTrends.length) { %>
        <p>Aucune donnée de vues quotidiennes n'est encore disponible.</p>
      <% } else { %>
        <ul class="stats-trend-list">
          <% viewTrends.forEach((row) => { %>
            <li>
              <span><%= row.date || row.day %></span>
              <strong><%= row.views %></strong>
            </li>
          <% }) %>
        </ul>
      <% } %>
    </div>
    <table class="sr-only" data-chart-table>
      <caption>Tendance des vues quotidiennes</caption>
      <thead>
        <tr>
          <th scope="col">Jour</th>
          <th scope="col">Nombre de vues</th>
        </tr>
      </thead>
      <tbody data-chart-table-body>
        <% if (viewTrends.length) { %>
          <% viewTrends.forEach((row) => { %>
            <tr>
              <th scope="row"><%= row.date || row.day %></th>
              <td><%= row.views %></td>
            </tr>
          <% }) %>
        <% } %>
      </tbody>
    </table>
  </div>
</section>

<section class="stats-activity-grid">
  <div class="card">
    <h2>Pages récemment créées</h2>
    <% if (!recentPages.length) { %>
      <p>Aucune création récente.</p>
    <% } else { %>
      <ul class="stats-activity-list">
        <% recentPages.forEach(page => { %>
          <li>
            <div>
              <a href="/wiki/<%= page.slug_id %>"><%= page.title %></a>
              <span class="text-muted text-sm">Créée le <%= page.created_at ? new Date(page.created_at).toLocaleString('fr-FR') : 'n/a' %></span>
            </div>
          </li>
        <% }) %>
      </ul>
    <% } %>
  </div>
  <div class="card">
    <h2>Événements récents</h2>
    <% if (!recentEvents.length) { %>
      <p>Aucun événement administrateur enregistré.</p>
    <% } else { %>
      <ul class="stats-activity-list">
        <% recentEvents.forEach(event => { %>
          <li>
            <div>
              <span class="highlight-label"><%= event.type %></span>
              <span class="text-muted text-sm">Canal : <%= event.channel %></span>
              <% if (event.snowflake_id) { %>
                <br /><small class="text-muted">ID : <code><%= event.snowflake_id %></code></small>
              <% } %>
            </div>
            <div class="text-muted text-sm">
              <time datetime="<%= event.created_at %>"><%= new Date(event.created_at).toLocaleString('fr-FR') %></time>
              <% if (event.username) { %>
                <% const eventUserColor = event.userRole && event.userRole.color ? event.userRole.color : null; %>
                <% const eventUserClasses = ['user-handle', 'event-user']; %>
                <% const eventUserStyle = eventUserColor && eventUserColor.hasColor ? eventUserColor.style : ''; %>
                <% if (eventUserColor && eventUserColor.hasColor) { eventUserClasses.push('role-colored-text'); eventUserClasses.push(eventUserColor.className); } %>
                <% const eventUserBadges = Array.isArray(event?.userRole?.badges) ? event.userRole.badges : []; %>
                · <span>
                  par
                  <span class="user-handle-decorated">
                    <strong class="<%= eventUserClasses.join(' ') %>" style="<%= eventUserStyle %>"><%= event.username %></strong>
                    <%- include('../partials/userBadges', {
                      badges: eventUserBadges,
                      listClass: ['user-handle-badges', 'user-handle-badges--inline'],
                      itemClass: 'user-handle-badge-item',
                      iconClass: 'user-handle-badge-icon',
                      srOnlyClass: 'sr-only',
                      ariaLabel: "Badges de l'utilisateur",
                    }) %>
                  </span>
                </span>
              <% } %>
            </div>
          </li>
        <% }) %>
      </ul>
    <% } %>
  </div>
</section>

<section class="card stats-panels">
  <div>
    <h2>Pages les plus aimées</h2>
    <% if (!topLikedPages.length) { %>
      <p>Aucun like enregistré.</p>
    <% } else { %>
      <div class="table-wrap">
        <table class="data-table compact">
          <thead>
            <tr>
              <th>#</th>
              <th>Article</th>
              <th>Likes</th>
            </tr>
          </thead>
          <tbody>
            <% topLikedPages.forEach((row, idx) => { %>
              <tr>
                <td><%= idx + 1 %></td>
                <td><a href="/wiki/<%= row.slug_id %>"><%= row.title %></a></td>
                <td><%= row.likes %></td>
              </tr>
            <% }) %>
          </tbody>
        </table>
      </div>
      <%- include('./paginationControls', { pagination: topLikedPagination }) %>
    <% } %>
  </div>
  <div>
    <h2>Auteurs de commentaires</h2>
    <% if (!topCommenters.length) { %>
      <p>Aucun commentaire enregistré.</p>
    <% } else { %>
      <div class="table-wrap">
        <table class="data-table compact">
          <thead>
            <tr>
              <th>Auteur</th>
              <th>Commentaires</th>
            </tr>
          </thead>
          <tbody>
            <% topCommenters.forEach(row => { %>
              <% const commenterColor = row.authorRole && row.authorRole.color ? row.authorRole.color : null; %>
              <% const commenterClasses = ['user-handle', 'commenter-name']; %>
              <% const commenterStyle = commenterColor && commenterColor.hasColor ? commenterColor.style : ''; %>
              <% if (commenterColor && commenterColor.hasColor) { commenterClasses.push('role-colored-text'); commenterClasses.push(commenterColor.className); } %>
              <% const commenterBadges = Array.isArray(row?.authorRole?.badges) ? row.authorRole.badges : []; %>
              <tr>
                <td>
                  <% if (row.author && row.author !== 'Anonyme') { %>
                    <span class="user-handle-decorated">
                      <strong class="<%= commenterClasses.join(' ') %>" style="<%= commenterStyle %>"><%= row.author %></strong>
                      <%- include('../partials/userBadges', {
                        badges: commenterBadges,
                        listClass: ['user-handle-badges', 'user-handle-badges--inline'],
                        itemClass: 'user-handle-badge-item',
                        iconClass: 'user-handle-badge-icon',
                        srOnlyClass: 'sr-only',
                        ariaLabel: "Badges de l'utilisateur",
                      }) %>
                    </span>
                  <% } else { %>
                    <%= row.author %>
                  <% } %>
                </td>
                <td><%= row.comments %></td>
              </tr>
            <% }) %>
          </tbody>
        </table>
      </div>
      <%- include('./paginationControls', { pagination: topCommentersPagination }) %>
    <% } %>
  </div>
  <div>
    <h2>Articles les plus commentés</h2>
    <% if (!topCommentedPages.length) { %>
      <p>Aucun commentaire approuvé.</p>
    <% } else { %>
      <div class="table-wrap">
        <table class="data-table compact">
          <thead>
            <tr>
              <th>#</th>
              <th>Article</th>
              <th>Commentaires</th>
            </tr>
          </thead>
          <tbody>
            <% topCommentedPages.forEach((row, idx) => { %>
              <tr>
                <td><%= idx + 1 %></td>
                <td><a href="/wiki/<%= row.slug_id %>"><%= row.title %></a></td>
                <td><%= row.comments %></td>
              </tr>
            <% }) %>
          </tbody>
        </table>
      </div>
      <%- include('./paginationControls', { pagination: topCommentedPagination }) %>
    <% } %>
  </div>
</section>

<section class="card mb-xl">
  <h2>IPs les plus actives</h2>
  <% if (!activeIps.length) { %>
    <p>Aucune IP enregistrée.</p>
  <% } else { %>
    <div class="table-wrap">
      <table class="data-table compact">
        <thead>
          <tr>
            <th>#</th>
            <th>IP</th>
            <th>Vues</th>
          </tr>
        </thead>
        <tbody>
          <% activeIps.forEach((row, idx) => { %>
            <tr>
              <td><%= idx + 1 %></td>
              <td><code><%= row.ip %></code></td>
              <td><%= row.views %></td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
    <%- include('./paginationControls', { pagination: activeIpsPagination }) %>
  <% } %>
</section>

<section class="card mb-xl stats-panels">
  <div>
    <h2>Tags les plus utilisés</h2>
    <% if (!tagUsage.length) { %>
      <p>Aucun tag enregistré.</p>
    <% } else { %>
      <div class="table-wrap">
        <table class="data-table compact">
          <thead>
            <tr>
              <th>#</th>
              <th>Tag</th>
              <th>Pages</th>
            </tr>
          </thead>
          <tbody>
            <% tagUsage.forEach((row, idx) => { %>
              <tr>
                <td><%= idx + 1 %></td>
                <td><code><%= row.name %></code></td>
                <td><%= row.pages %></td>
              </tr>
            <% }) %>
          </tbody>
        </table>
      </div>
      <%- include('./paginationControls', { pagination: tagUsagePagination }) %>
    <% } %>
  </div>
  <div>
    <h2>Chronologie des commentaires (30 derniers jours)</h2>
    <% if (!commentTimeline.length) { %>
      <p>Aucune activité récente.</p>
    <% } else { %>
      <div class="table-wrap">
        <table class="data-table compact">
          <thead>
            <tr>
              <th>Jour</th>
              <th>Commentaires</th>
            </tr>
          </thead>
          <tbody>
            <% commentTimeline.forEach(row => { %>
              <tr>
                <td><%= row.day %></td>
                <td><%= row.comments %></td>
              </tr>
            <% }) %>
          </tbody>
        </table>
      </div>
      <%- include('./paginationControls', { pagination: commentTimelinePagination }) %>
    <% } %>
  </div>
</section>

<section class="card mb-xl">
  <h2>Vues par IP et article</h2>
  <% if (!ipViewsByPage.length) { %>
    <p>Aucune donnée disponible.</p>
  <% } else { %>
    <div class="table-wrap">
      <table class="data-table compact">
        <thead>
          <tr>
            <th>IP</th>
            <th>Article</th>
            <th>Slug</th>
            <th>Vues</th>
          </tr>
        </thead>
        <tbody>
          <% ipViewsByPage.forEach(row => { %>
            <tr>
              <td><code><%= row.ip %></code></td>
              <td><a href="/wiki/<%= row.slug_id %>"><%= row.title %></a></td>
              <td><code><%= row.slug_id %></code></td>
              <td><%= row.views %></td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
    <%- include('./paginationControls', { pagination: ipViewsPagination }) %>
  <% } %>
</section>

<% periods.forEach(period => { const rows = stats[period.key] || []; %>
  <section class="card mb-xl">
    <h2><%= period.label %></h2>
    <% if (!rows.length) { %>
      <p>Aucune donnée disponible pour cette période.</p>
    <% } else { %>
      <div class="table-wrap">
        <table class="data-table">
          <thead>
            <tr>
              <th>#</th>
              <th>Article</th>
              <th>Slug</th>
              <th>Vues</th>
            </tr>
          </thead>
          <tbody>
            <% rows.forEach((row, idx) => { %>
              <tr>
                <td><%= idx + 1 %></td>
                <td><a href="/wiki/<%= row.slug_id %>"><%= row.title %></a></td>
                <td><code><%= row.slug_id %></code></td>
                <td><strong><%= row.views %></strong></td>
              </tr>
            <% }) %>
          </tbody>
        </table>
      </div>
    <% } %>
  </section>
<% }) %>

<script defer src="/public/admin-stats.js"></script>
