<% title='Images'; %>
<%
  const csrfQuerySuffix =
    typeof csrfToken === 'string' && csrfToken.length
      ? `?_csrf=${encodeURIComponent(csrfToken)}`
      : '';
%>
<h1>Gestion des images</h1>
<div class="card mb-md">
  <h2>Ajouter une image</h2>
  <p class="mt-xs">
    Chaque image re√ßoit un identifiant unique (snowflake). Les fichiers volumineux sont automatiquement redimensionn√©s et optimis√©s.
    Vous pouvez d√©finir un nom personnalis√© sans changer le snowflake. Laissez le champ vide pour effacer le nom personnalis√©.
  </p>
  <form id="uploadForm" action="/admin/uploads<%= csrfQuerySuffix %>" method="post" enctype="multipart/form-data" class="flex flex-wrap gap-sm mt-sm">
    <%- include('../partials/csrf_field') %>
    <div class="flex-basis-220">
      <input type="file" id="imageInput" name="image" accept="image/*" required aria-label="Image" />
    </div>
    <div class="flex-basis-220">
      <input type="text" id="displayNameInput" name="displayName" placeholder="Nom personnalis√© (optionnel)" maxlength="120" aria-label="Nom personnalis√© (optionnel)" />
    </div>
    <div class="self-end">
      <button class="btn success" data-icon="üöÄ" type="submit">Uploader</button>
    </div>
  </form>
  <div id="uploadMessage" class="mt-sm"></div>
</div>

<form method="get" class="card mb-md">
  <div class="flex flex-wrap gap-sm items-end">
    <label class="stack-form">
      <span class="text-sm text-muted">Rechercher</span>
      <input
        type="text"
        name="search"
        value="<%= typeof searchTerm === 'string' ? searchTerm : '' %>"
        placeholder="Snowflake, nom de fichier‚Ä¶"
        class="flex-basis-260"
      />
    </label>
    <input type="hidden" name="page" value="1" />
    <input type="hidden" name="perPage" value="<%= pagination.perPage %>" />
    <button class="btn" data-icon="üîç" type="submit">Rechercher</button>
    <% if (searchTerm) { %>
      <a class="btn secondary" href="/admin/uploads">R√©initialiser</a>
    <% } %>
  </div>
</form>

<% if (uploads.length) { %>
  <div class="table-wrap">
    <table class="data-table" id="uploadsTable">
      <thead>
        <tr>
          <th>Aper√ßu</th>
          <th>D√©tails</th>
          <th>Nom personnalis√©</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <% uploads.forEach(upload => { %>
          <% const displayName = upload.displayName || ''; %>
          <% const createdAt = upload.createdAt ? new Date(upload.createdAt).toLocaleString('fr-FR') : '‚Äî'; %>
          <% const sizeLabel = upload.size ? Math.max(1, Math.round(upload.size / 1024)) + ' Ko' : '‚Äî'; %>
          <tr>
            <td>
              <img src="<%= upload.url %>" alt="" class="upload-thumb" />
            </td>
          <td class="leading-snug">
            <div><strong>Snowflake :</strong> <code><%= upload.id %></code></div>
            <div><strong>Nom original :</strong> <%= upload.originalName %></div>
            <div><strong>Nom affich√© :</strong> <%= displayName || '‚Äî' %></div>
            <div><strong>Taille :</strong> <%= sizeLabel %></div>
            <div><strong>Ajout√© :</strong> <%= createdAt %></div>
          </td>
          <td>
            <form method="post" action="/admin/uploads/<%= upload.id %>/name" class="stack-form">
              <%- include('../partials/csrf_field') %>
              <input type="text" name="displayName" value="<%= displayName %>" maxlength="120" placeholder="Nom personnalis√©" />
              <button class="btn success" data-icon="üíæ" type="submit">Enregistrer</button>
            </form>
          </td>
          <td>
            <% const altText = displayName || upload.originalName || ''; %>
            <div class="upload-actions" data-url="<%= upload.url %>" data-alt="<%= altText %>">
              <button class="btn copy-upload" data-icon="üìã" type="button">Copier le lien</button>
              <form method="post" action="/admin/uploads/<%= upload.id %>/delete" onsubmit="return confirm('Supprimer cette image ?')">
                <%- include('../partials/csrf_field') %>
                <button class="btn unlike" data-icon="üóëÔ∏è" type="submit">Supprimer</button>
              </form>
            </div>
          </td>
        </tr>
      <% }) %>
      </tbody>
    </table>
  </div>
  <%- include('./paginationControls', { pagination }) %>
<% } else { %>
  <p class="card text-muted">Aucune image disponible pour le moment.</p>
<% } %>

<script>
  const uploadForm = document.getElementById('uploadForm');
  const uploadMessage = document.getElementById('uploadMessage');
  const uploadsTable = document.getElementById('uploadsTable');
  const uploadActionsSelector = '.upload-actions';
  const copyDefaultLabel = 'Copier le lien';
  const copySuccessLabel = 'Lien copi√© !';
  const csrfTokenInput = document.querySelector('input[name="_csrf"]');
  const csrfToken = csrfTokenInput?.value || '';

  function buildCopyValue(url) {
    return url || '';
  }

  function prepareCopyActions(container) {
    if (!container) return;
    const url = container.dataset.url || '';
    const button = container.querySelector('.copy-upload');
    if (button) {
      button.dataset.snippet = buildCopyValue(url);
      if (!button.dataset.originalText) {
        button.dataset.originalText = button.textContent || copyDefaultLabel;
      }
    }
  }

  function escapeHtml(value) {
    return (value ?? '').toString().replace(/[&<>"']/g, (char) => {
      switch (char) {
        case '&': return '&amp;';
        case '<': return '&lt;';
        case '>': return '&gt;';
        case '"': return '&quot;';
        case "'": return '&#39;';
        default: return char;
      }
    });
  }

  function setMessage(text, type = 'info') {
    uploadMessage.innerHTML = '';
    if (!text) return;
    const box = document.createElement('div');
    box.textContent = text;
    box.classList.add('alert');
    if (type === 'error') {
      box.classList.add('alert-error');
    } else if (type === 'success') {
      box.classList.add('alert-success');
    } else {
      box.classList.add('alert-info');
    }
    uploadMessage.appendChild(box);
  }

  function prependUploadRow(data) {
    if (!uploadsTable) {
      window.location.reload();
      return;
    }
    const tbody = uploadsTable.querySelector('tbody');
    if (!tbody) {
      window.location.reload();
      return;
    }

    const tr = document.createElement('tr');
    const displayName = data.displayName || '';
    const originalName = data.originalName || data.name || '';
    const safeUrl = escapeHtml(data.url);
    const safeId = escapeHtml(data.id);
    const csrfField = csrfToken
      ? `<input type="hidden" name="_csrf" value="${escapeHtml(csrfToken)}" />`
      : '';

    tr.innerHTML = `
      <td>
        <img src="${safeUrl}" alt="" class="upload-thumb" />
      </td>
      <td class="leading-snug">
        <div><strong>Snowflake :</strong> <code>${safeId}</code></div>
        <div><strong>Nom original :</strong> ${escapeHtml(originalName)}</div>
        <div><strong>Nom affich√© :</strong> ${displayName ? escapeHtml(displayName) : '‚Äî'}</div>
        <div><strong>Taille :</strong> ${Math.max(1, Math.round((data.size || 0) / 1024))} Ko</div>
        <div><strong>Ajout√© :</strong> ${new Date().toLocaleString('fr-FR')}</div>
      </td>
      <td>
        <form method="post" action="/admin/uploads/${safeId}/name" class="stack-form">
          ${csrfField}
          <input type="text" name="displayName" value="${escapeHtml(displayName)}" maxlength="120" placeholder="Nom personnalis√©" />
          <button class="btn success" data-icon="üíæ" type="submit">Enregistrer</button>
        </form>
      </td>
      <td>
        <div class="upload-actions" data-url="${safeUrl}" data-alt="${escapeHtml(displayName || originalName || '')}">
          <button class="btn copy-upload" data-icon="üìã" type="button">Copier le lien</button>
          <form method="post" action="/admin/uploads/${safeId}/delete" onsubmit="return confirm('Supprimer cette image ?')">
            ${csrfField}
            <button class="btn unlike" data-icon="üóëÔ∏è" type="submit">Supprimer</button>
          </form>
        </div>
      </td>
    `;
    tbody.prepend(tr);
    prepareCopyActions(tr.querySelector(uploadActionsSelector));
  }

  document.querySelectorAll(uploadActionsSelector).forEach(prepareCopyActions);

  document.addEventListener('click', (event) => {
    const button = event.target.closest('.copy-upload');
    if (!button) return;
    const snippet = button.dataset.snippet || '';
    if (!snippet) return;
    navigator.clipboard.writeText(snippet).then(() => {
      const originalText = button.dataset.originalText || button.textContent || copyDefaultLabel;
      button.dataset.originalText = originalText;
      button.textContent = copySuccessLabel;
      setTimeout(() => {
        button.textContent = originalText || copyDefaultLabel;
      }, 1500);
    });
  });

  if (uploadForm) {
    uploadForm.addEventListener('submit', async (event) => {
      event.preventDefault();
      if (!uploadForm.image.files.length) {
        setMessage('Choisissez un fichier avant d\'envoyer.', 'error');
        return;
      }
      const button = uploadForm.querySelector('button[type="submit"]');
      button.disabled = true;
      setMessage('Optimisation et upload en cours‚Ä¶');
      try {
        const formData = new FormData(uploadForm);
        const dn = formData.get('displayName');
        if (dn) formData.set('displayName', dn.toString().trim());
        const headers = { Accept: 'application/json' };
        if (csrfToken) {
          headers['X-CSRF-Token'] = csrfToken;
        }
        const response = await fetch(uploadForm.action, {
          method: 'POST',
          body: formData,
          headers,
          credentials: 'same-origin',
        });
        const contentType = response.headers.get('content-type') || '';
        let payload = null;
        if (contentType.includes('application/json')) {
          try {
            payload = await response.json();
          } catch (parseError) {
            console.error('Erreur lors de la lecture de la r√©ponse JSON de l\'upload', parseError);
          }
        }
        if (!payload) {
          const status = response.status || 0;
          const message =
            status >= 400
              ? `Le serveur a renvoy√© une erreur (${status}). R√©essayez apr√®s avoir actualis√© la page.`
              : "Le serveur a renvoy√© une r√©ponse inattendue. V√©rifiez votre connexion puis r√©essayez.";
          throw new Error(message);
        }
        if (!response.ok || payload.ok === false) {
          throw new Error(payload.message || 'Erreur lors de l\'upload');
        }
        if (typeof payload.ok === 'undefined') {
          throw new Error('R√©ponse inattendue du serveur.');
        }
        setMessage('Image envoy√©e avec succ√®s.', 'success');
        prependUploadRow(payload);
        uploadForm.reset();
      } catch (err) {
        setMessage(err.message || 'Erreur lors de l\'upload', 'error');
      } finally {
        const btn = uploadForm.querySelector('button[type="submit"]');
        if (btn) btn.disabled = false;
      }
    });
  }
</script>
