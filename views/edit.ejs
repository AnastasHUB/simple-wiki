<% title = page ? 'Éditer' : 'Nouvelle page'; %>
<h1><%= title %></h1>
<% const isSubmission = typeof submissionMode !== 'undefined' ? submissionMode : false; %>
<% const rawFormState = formState && typeof formState === 'object' ? formState : {}; %>
<% const initialAuthor = typeof authorName !== 'undefined'
  ? authorName
  : (page && page.author ? page.author : ''); %>
<% const authorFieldValue = typeof rawFormState.author === 'string' ? rawFormState.author : initialAuthor; %>
<% const initialTitleValue = page ? page.title : ''; %>
<% const titleFieldValue = typeof rawFormState.title === 'string' ? rawFormState.title : initialTitleValue; %>
<% const initialContentValue = page ? page.content : ''; %>
<% const contentFieldValue = typeof rawFormState.content === 'string' ? rawFormState.content : initialContentValue; %>
<% const initialTagsValue = typeof tags === 'string' ? tags : ''; %>
<% const tagsFieldValue = typeof rawFormState.tags === 'string' ? rawFormState.tags : initialTagsValue; %>
<% const canUploadEmbed = typeof allowUploads !== 'undefined' ? allowUploads : false; %>
<% const initialEmbedImageValue = page && page.embed_image_url ? page.embed_image_url : ''; %>
<% const embedImageFieldValue = typeof rawFormState.embedImageUrl === 'string' ? rawFormState.embedImageUrl : initialEmbedImageValue; %>
<% const statusOptionsList = Array.isArray(statusOptions) ? statusOptions : []; %>
<% const showStatusControls = !!canChooseStatus; %>
<% const canSchedulePublication = !!canSchedule; %>
<% const publishAtFieldValue = typeof publishAtValue === 'string' ? publishAtValue : ''; %>
<% const scheduleSelected = statusOptionsList.some((opt) => opt && opt.value === 'scheduled' && opt.selected); %>
<% const errorMessages = Array.isArray(validationErrors) ? validationErrors : []; %>
<% if (isSubmission) { %>
  <div class="card card-highlight mb-md">
    <p class="mt-0 mb-0">
      Votre proposition sera enregistrée avec votre adresse IP et un administrateur devra la valider avant publication.
    </p>
  </div>
<% } %>
<% if (errorMessages.length) { %>
  <div class="card card-error mb-md" role="alert">
    <ul class="mt-0 mb-0">
      <% errorMessages.forEach((message) => { %>
        <li><%= message %></li>
      <% }) %>
    </ul>
  </div>
<% } %>
<form method="post" enctype="multipart/form-data" data-page-editor-form data-can-schedule="<%= canSchedulePublication ? 'true' : 'false' %>">
  <%- include('partials/csrf_field') %>
  <label>Titre</label>
  <input type="text" name="title" value="<%= titleFieldValue %>" required />
  <label>Contenu (liens [[internes]])</label>
  <textarea name="content" id="contentField" rows="18" required hidden><%- contentFieldValue %></textarea>
  <div class="editor-mode-switch" data-editor-mode-switch>
    <button
      type="button"
      class="mode-toggle is-active"
      data-editor-mode="markdown"
      aria-pressed="true"
    >
      Markdown avancé
    </button>
    <button
      type="button"
      class="mode-toggle"
      data-editor-mode="visual"
      aria-pressed="false"
    >
      Mode visuel (drag &amp; drop)
    </button>
  </div>
  <div class="editor-shell" data-editor-shell>
    <div
      class="markdown-editor-shell"
      data-markdown-editor
      data-target="#contentField"
    >
    <div
      class="markdown-toolbar"
      role="toolbar"
      aria-label="Outils de mise en forme"
    >
      <button type="button" class="toolbar-btn" data-md-action="heading-2" aria-label="Titre niveau 2" title="Titre niveau 2">H2</button>
      <button type="button" class="toolbar-btn" data-md-action="heading-3" aria-label="Titre niveau 3" title="Titre niveau 3">H3</button>
      <button type="button" class="toolbar-btn" data-md-action="bold" aria-label="Gras" title="Gras"><span aria-hidden="true">𝐆</span></button>
      <button type="button" class="toolbar-btn" data-md-action="italic" aria-label="Italique" title="Italique"><span aria-hidden="true"><em>I</em></span></button>
      <button type="button" class="toolbar-btn" data-md-action="highlight" aria-label="Surligner" title="Surligner"><span aria-hidden="true">🖍️</span></button>
      <button type="button" class="toolbar-btn" data-md-action="strike" aria-label="Barré" title="Barré"><span aria-hidden="true">S̶</span></button>
      <button type="button" class="toolbar-btn" data-md-action="code" aria-label="Code inline" title="Code inline"><span aria-hidden="true">`</span></button>
      <button type="button" class="toolbar-btn" data-md-action="quote" aria-label="Citation" title="Citation"><span aria-hidden="true">❝</span></button>
      <button type="button" class="toolbar-btn" data-md-action="link" aria-label="Lien" title="Lien"><span aria-hidden="true">🔗</span></button>
      <button type="button" class="toolbar-btn" data-md-action="image" aria-label="Image" title="Image"><span aria-hidden="true">🖼️</span></button>
      <button type="button" class="toolbar-btn" data-md-action="code-block" aria-label="Bloc de code" title="Bloc de code"><span aria-hidden="true">&lt;/&gt;</span></button>
      <button type="button" class="toolbar-btn" data-md-action="spoiler" aria-label="Bloc spoiler" title="Bloc spoiler"><span aria-hidden="true">🕵️</span></button>
      <button type="button" class="toolbar-btn" data-md-action="details" aria-label="Bloc détaillé" title="Bloc détaillé"><span aria-hidden="true">📂</span></button>
      <button type="button" class="toolbar-btn" data-md-action="callout-info" aria-label="Bloc informatif" title="Bloc informatif"><span aria-hidden="true">ℹ️</span></button>
      <button type="button" class="toolbar-btn" data-md-action="callout-warning" aria-label="Bloc d'avertissement" title="Bloc d'avertissement"><span aria-hidden="true">⚠️</span></button>
      <button type="button" class="toolbar-btn" data-md-action="callout-success" aria-label="Bloc de réussite" title="Bloc de réussite"><span aria-hidden="true">✅</span></button>
      <button type="button" class="toolbar-btn" data-md-action="katex" aria-label="Formule mathématique" title="Formule mathématique"><span aria-hidden="true">∑</span></button>
      <button type="button" class="toolbar-btn" data-md-action="mermaid" aria-label="Diagramme Mermaid" title="Diagramme Mermaid"><span aria-hidden="true">🗺️</span></button>
      <button type="button" class="toolbar-btn" data-md-action="unordered-list" aria-label="Liste à puces" title="Liste à puces"><span aria-hidden="true">•</span></button>
      <button type="button" class="toolbar-btn" data-md-action="ordered-list" aria-label="Liste numérotée" title="Liste numérotée"><span aria-hidden="true">1.</span></button>
      <button type="button" class="toolbar-btn" data-md-action="task-list" aria-label="Liste de tâches" title="Liste de tâches"><span aria-hidden="true">☐</span></button>
      <button type="button" class="toolbar-btn" data-md-action="horizontal-rule" aria-label="Règle horizontale" title="Règle horizontale"><span aria-hidden="true">―</span></button>
      <button type="button" class="toolbar-btn" data-md-action="table" aria-label="Tableau" title="Tableau"><span aria-hidden="true">▦</span></button>
      <button
        type="button"
        class="toolbar-btn emoji-trigger"
        data-emoji-trigger
        aria-label="Insérer un emoji"
        title="Insérer un emoji"
      >😊</button>
      <div class="emoji-popover" data-emoji-picker hidden></div>
    </div>
    <div class="markdown-editor-body">
      <div class="markdown-editor-pane">
        <textarea
          class="markdown-input"
          rows="18"
          data-editor-input
          aria-label="Éditeur Markdown"
        ></textarea>
        <div
          class="link-suggestions"
          data-link-suggestions
          hidden
          aria-label="Suggestions de liens internes"
        ></div>
      </div>
      <div class="markdown-preview-pane">
        <div class="markdown-preview-heading">Prévisualisation</div>
        <div class="markdown-preview" data-editor-preview aria-live="polite"></div>
      </div>
    </div>
    <div class="editor-status" data-editor-status role="status" aria-live="polite"></div>
    </div>
    <div class="visual-editor-shell" data-visual-editor hidden>
      <div class="visual-editor-header">
        <p>
          Composez votre article bloc par bloc, puis réorganisez-les librement en les
          faisant glisser. Les blocs sont convertis automatiquement en Markdown
          compatible avec l’aperçu et la publication.
        </p>
      </div>
      <div class="visual-editor-body" data-block-editor>
        <div class="visual-blocks" data-block-list aria-live="polite"></div>
        <div class="visual-empty" data-block-empty hidden>
          <p>Aucun bloc pour le moment. Ajoutez un premier bloc à l’aide des boutons ci-dessous.</p>
        </div>
      </div>
      <div class="visual-editor-footer">
        <div class="block-add-menu" role="toolbar" aria-label="Ajouter un bloc">
          <button type="button" class="block-add-btn" data-add-block="paragraph">Paragraphe</button>
          <button type="button" class="block-add-btn" data-add-block="heading-1">Titre (niveau 1)</button>
          <button type="button" class="block-add-btn" data-add-block="heading-2">Titre (niveau 2)</button>
          <button type="button" class="block-add-btn" data-add-block="heading-3">Sous-titre (niveau 3)</button>
          <button type="button" class="block-add-btn" data-add-block="heading-4">Sous-titre (niveau 4)</button>
          <button type="button" class="block-add-btn" data-add-block="quote">Citation</button>
          <button type="button" class="block-add-btn" data-add-block="list">Liste</button>
          <button type="button" class="block-add-btn" data-add-block="task-list">Liste de tâches</button>
          <button type="button" class="block-add-btn" data-add-block="image">Image</button>
          <button type="button" class="block-add-btn" data-add-block="code">Bloc de code</button>
          <button type="button" class="block-add-btn" data-add-block="math">Formule (KaTeX)</button>
          <button type="button" class="block-add-btn" data-add-block="mermaid">Diagramme Mermaid</button>
          <button type="button" class="block-add-btn" data-add-block="separator">Séparateur</button>
          <button type="button" class="block-add-btn" data-add-block="callout-info">Bloc informatif</button>
          <button type="button" class="block-add-btn" data-add-block="callout-warning">Bloc d'avertissement</button>
          <button type="button" class="block-add-btn" data-add-block="callout-success">Bloc de réussite</button>
          <button type="button" class="block-add-btn" data-add-block="details">Bloc détaillé</button>
          <button type="button" class="block-add-btn" data-add-block="spoiler">Bloc spoiler</button>
          <button type="button" class="block-add-btn" data-add-block="table">Tableau</button>
        </div>
      </div>
    </div>
  </div>
  <label for="author-field">Auteur affiché</label>
  <input
    id="author-field"
    type="text"
    name="author"
    maxlength="80"
    value="<%= authorFieldValue %>"
    placeholder="Votre nom ou pseudo"
  />
  <p class="editor-hint">
    Ce nom sera affiché comme auteur de l’article. Si vous n’êtes pas connecté, choisissez le pseudo de votre choix.
  </p>
  <label for="embed-image-url">Image d’aperçu (Discord, Twitter…)</label>
  <input
    id="embed-image-url"
    type="url"
    name="embed_image_url"
    value="<%= embedImageFieldValue %>"
    placeholder="https://exemple.com/image.png ou /public/uploads/mon-image.png"
    inputmode="url"
  />
  <p class="editor-hint">
    Cette image sera utilisée pour les aperçus lors du partage de l’article. Laissez vide pour utiliser la première image de
    l’article ou le logo du wiki.
  </p>
  <% if (canUploadEmbed) { %>
    <label for="embed-image-file">Téléverser une image d’aperçu</label>
    <input
      id="embed-image-file"
      type="file"
      name="embed_image_file"
      accept="image/png,image/jpeg,image/webp,image/gif"
    />
    <p class="editor-hint">
      Formats acceptés : JPG, PNG, GIF et WebP (5&nbsp;Mo maximum).
    </p>
    <%- include('partials/uploadHelper') %>
  <% } %>
  <% if (embedImageFieldValue) { %>
    <div class="embed-preview">
      <span class="embed-preview__label">Aperçu actuel</span>
      <img src="<%= embedImageFieldValue %>" alt="Aperçu de l’image d’embed" loading="lazy" />
    </div>
  <% } %>
  <% if (showStatusControls) { %>
    <label for="status-field">Statut de publication</label>
    <select id="status-field" name="status" data-status-field>
      <% statusOptionsList.forEach((option) => { %>
        <option value="<%= option.value %>" <%= option.selected ? 'selected' : '' %>>
          <%= option.label %>
        </option>
      <% }) %>
    </select>
    <p class="editor-hint">
      Choisissez «&nbsp;Brouillon&nbsp;» pour enregistrer sans publier immédiatement.
    </p>
    <div
      class="schedule-controls"
      data-schedule-controls
      <%= scheduleSelected ? '' : 'hidden' %>
    >
      <label for="publish-at-field">Publication programmée</label>
      <input
        id="publish-at-field"
        type="datetime-local"
        name="publish_at"
        value="<%= publishAtFieldValue %>"
        data-publish-at-field
        <%= canSchedulePublication ? '' : 'disabled' %>
      />
      <p class="editor-hint">
        Sélectionnez la date et l’heure auxquelles l’article sera automatiquement publié.
      </p>
      <p class="form-error" data-schedule-error hidden></p>
    </div>
  <% } %>
  <% if (roleVisibility && roleVisibility.enabled) { %>
    <label for="page-visible-roles">Rôles autorisés à consulter l’article</label>
    <select id="page-visible-roles" name="visible_roles" multiple size="6">
      <% roleVisibility.options.forEach(function(option) { %>
        <option value="<%= option.value %>" <%= option.selected ? 'selected' : '' %>>
          <%= option.label %>
        </option>
      <% }); %>
    </select>
    <% if (roleVisibility.hasSelection) { %>
      <p class="editor-hint">Accessible uniquement par&nbsp;: <strong><%= roleVisibility.selectedLabels.join(', ') %></strong>.</p>
    <% } else { %>
      <p class="editor-hint">Laissez vide pour rendre l’article public pour tous les rôles.</p>
    <% } %>
  <% } %>
  <label>Tags (séparés par des virgules)</label>
  <input type="text" name="tags" value="<%= tagsFieldValue %>" />
  <div class="actions">
    <% if (isSubmission) { %>
      <button class="btn success" data-icon="📨" type="submit">Envoyer ma proposition</button>
    <% } else { %>
      <button class="btn success" data-icon="💾" type="submit">Enregistrer</button>
    <% } %>
  </div>
</form>

<% if (showStatusControls) { %>
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const form = document.querySelector("[data-page-editor-form]");
      if (!form) {
        return;
      }
      const statusField = form.querySelector("[data-status-field]");
      const scheduleBlock = form.querySelector("[data-schedule-controls]");
      const publishInput = form.querySelector("[data-publish-at-field]");
      const errorBox = form.querySelector("[data-schedule-error]");
      const canSchedule = form.dataset.canSchedule === "true";

      function clearScheduleError() {
        if (errorBox) {
          errorBox.textContent = "";
          errorBox.hidden = true;
        }
      }

      function showScheduleError(message) {
        if (!errorBox) {
          return;
        }
        errorBox.textContent = message;
        errorBox.hidden = false;
      }

      function updateScheduleVisibility() {
        if (!scheduleBlock || !statusField) {
          return;
        }
        const shouldShow = statusField.value === "scheduled";
        scheduleBlock.hidden = !shouldShow;
        if (!shouldShow) {
          clearScheduleError();
        }
      }

      if (statusField) {
        statusField.addEventListener("change", updateScheduleVisibility);
        updateScheduleVisibility();
      }

      form.addEventListener("submit", (event) => {
        if (!statusField || statusField.value !== "scheduled") {
          return;
        }
        if (!canSchedule) {
          event.preventDefault();
          showScheduleError(
            "Vous n'avez pas la permission de programmer la publication de cette page.",
          );
          return;
        }
        const rawValue = publishInput ? publishInput.value.trim() : "";
        if (!rawValue) {
          event.preventDefault();
          showScheduleError("Veuillez indiquer la date de publication planifiée.");
          return;
        }
        const parsed = new Date(rawValue);
        if (Number.isNaN(parsed.getTime())) {
          event.preventDefault();
          showScheduleError("La date de publication est invalide.");
          return;
        }
        if (parsed.getTime() <= Date.now()) {
          event.preventDefault();
          showScheduleError("La date de publication doit être ultérieure.");
          return;
        }
        clearScheduleError();
      });
    });
  </script>
<% } %>

